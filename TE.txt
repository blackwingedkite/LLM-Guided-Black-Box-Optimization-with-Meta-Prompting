from pathlib import Path

# Markdown content for the article
markdown_content = """
# GPT vs Gemini：從旅行推銷員問題看 AI 的推理風格與角色差異

> 當你向 AI 提出一個複雜問題時，你想要的是一段好聽的解釋，還是一個經過驗證的解法？

最近在解決一個經典問題——**旅行推銷員問題（TSP）**時，我分別使用了 Google Gemini 與 OpenAI GPT，兩者都表現得頗具水準，但我逐漸發現：**他們在推理這件事情上，幾乎是兩種不同的物種**。

這篇文章，我想從具體的測試實驗出發，帶你比較：

- 它們是怎麼思考問題的？
- 哪種風格更適合哪種使用者？
- AI 工具在科學推理上的極限與選擇

---

## 🧭 問題背景：一個簡單但夠難的測試題

我們問了一個經典問題：

> 「給定 20 個座標點，請找出最短的巡迴路徑。」

這是 NP-Hard 的旅行推銷員問題（TSP）。我們希望 AI：

- ✅ 給出正確答案
- ✅ 可再現
- ✅ 有程式碼支撐

---

## 🆚 GPT vs Gemini：兩種推理邏輯的真實差異

### GPT：實驗導向，程式與推理交織進行

GPT 給出的解法有幾個特徵：

- ✅ 提供三種方法：最近鄰 + 2-opt、模擬退火（SA）、Held-Karp 精確 DP
- ✅ 每種方法都有可執行程式碼
- ✅ 得到一致的最短距離：**765.69**
- ✅ 有完整路徑，並以精確算法驗證最優

GPT 是一種「行動式推理」風格：邊想邊寫、邊寫邊算、邊算邊改。

---

### Gemini：敘事導向，規劃清楚但單向推理

Gemini 強調策略規劃與演算法選擇：

- ✅ 多起點 + 最近鄰 + 2-opt
- ✅ 分析不同起點對解的影響
- ⚠️ 沒有驗證是否為全域最短
- ⚠️ 沒有列出最終路徑與精確距離

它更像一位敘述流程的簡報者，講得有條理，但沒能確保結果正確。

---

## ⏱️ 時間與資源消耗的差異

| 面向         | GPT                           | Gemini                        |
|--------------|--------------------------------|-------------------------------|
| 平均輸出時間 | 1~6 分鐘（依運算量而定）     | 約 1 分鐘                    |
| Token 使用量 | 較多（包含程式、多輪思考）   | 較少（單向回答，偏敘述）     |
| 可再現性     | ✅ 高                          | ⚠️ 中等                       |
| 結果可信度   | ✅ 有驗證                      | ⚠️ 缺乏驗證                   |

---

## 👨‍🏫 vs 👷 Gemini 像老師，GPT 像工程師

這兩種推理風格的差異，讓我想到一個非常貼切的比喻：

> Gemini 是條理清晰的**老師**，GPT 是實驗認真的**工程師**

| 特徵面向      | Gemini（老師型） | GPT（工程師型） |
|---------------|------------------|------------------|
| 回答方式      | 說明策略、解釋流程 | 實作程式、驗證邏輯 |
| 處理錯誤      | 補充說明          | 直接 debug        |
| 用戶體驗      | 「我告訴你怎麼做」 | 「我跑給你看」    |

這也是我們選擇 AI 工具時的一個關鍵視角：你現在，是想「學會怎麼做」還是「找到怎麼做對」？

---

## 📌 結語：你要的是答案，還是推理？

最終，我認為：

- Gemini 適合做「簡報」與「解釋概念」
- GPT 更適合「科研」、「程式實作」、「邏輯驗證」

這不是誰比較好，而是——你當下**需要哪一種幫手**？

---

## 🔧 附錄：完整程式碼（可展開）

<details>
<summary>GPT 使用的 2-opt + Held-Karp 程式碼</summary>

（略，此處可自行加入原始實作碼）

</details>
"""

# Save to markdown file
output_path = Path("/mnt/data/gpt-vs-gemini-tsp-ai-reasoning.md")
output_path.write_text(markdown_content, encoding="utf-8")

output_path.name  # return filename for user to download
